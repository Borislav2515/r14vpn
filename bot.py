import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, BotCommand, BotCommandScopeDefault
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_config import BOT_TOKEN, OUTLINE_SERVERS
from db import init_db, add_user, add_key, get_keys
from outline_api import create_access_key
from outline_api import get_access_keys
from collections import defaultdict
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã - —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ Outline VPN?", callback_data="about")],
    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="choose_server")],
    [InlineKeyboardButton(text="–ú–æ–∏ –∫–ª—é—á–∏", callback_data="my_keys")],
])

# –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
servers_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", callback_data="server_0")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")],
])

# –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
gen_key_kb_germany = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data="genkey_0")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_server")],
])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è WebApp
webapp_url = "https://borislav2515.github.io/r14vpn/"
webapp_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å VPN WebApp", web_app=WebAppInfo(url=webapp_url))]
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_commands():
    commands = [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="keys", description="üîë –ú–æ–∏ –∫–ª—é—á–∏"),
        BotCommand(command="support", description="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

@dp.message(CommandStart())
async def start(message: types.Message):
    add_user(message.from_user.id, message.from_user.username or "")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN —á–µ—Ä–µ–∑ Outline. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )
    await message.answer(
        "–ò–ª–∏ –æ—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏:",
        reply_markup=webapp_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /keys
@dp.message(lambda message: message.text == "/keys")
async def keys_command(message: types.Message):
    user_id = message.from_user.id
    keys = get_keys(user_id)
    if not keys:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.",
            reply_markup=main_kb
        )
        return
    
    from collections import defaultdict
    keys_by_server = defaultdict(list)
    for server_id, key_id, url, created, *rest in keys:
        expires_at = rest[0] if rest else None
        keys_by_server[server_id].append((key_id, url, created, expires_at))
    text = "<b>üîë –¢–≤–æ–∏ VPN-–∫–ª—é—á–∏:</b>\n"
    found = False
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    server_names = {
        0: "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™"
    }
    
    for server in OUTLINE_SERVERS:
        server_id = server["id"]
        if server_id not in keys_by_server:
            continue
        server_name = server_names.get(server_id, server['name'])
        try:
            from outline_api import get_access_keys
            real_keys = get_access_keys(server["api_url"])
            real_keys_map = {k["id"]: k for k in real_keys} if real_keys else dict()
            for idx, (key_id, url, created, expires_at) in enumerate(keys_by_server[server_id], 1):
                # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                expires_str = ""
                if expires_at:
                    try:
                        dt = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S")
                        days_left = (dt - datetime.now()).days
                        if days_left < 0:
                            expires_str = f"\n‚è∞ <b>–ö–ª—é—á –∏—Å—Ç—ë–∫</b> <code>{expires_at[:16]}</code>"
                        else:
                            expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code> (<b>{days_left}</b> –¥–Ω.)"
                    except Exception:
                        expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code>"
                if key_id in real_keys_map:
                    found = True
                    used_bytes = real_keys_map[key_id].get("usedBytes", 0)
                    text += (f"\n<b>{idx}. {server_name}</b>\n"
                             f"üåê <b>–°—Å—ã–ª–∫–∞:</b> <code>{url}</code>\n"
                             f"{expires_str}\n"
                             f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b> <code>{used_bytes / (1024*1024):.1f} –ú–ë</code>\n"
                             f"{'‚Äî'*24}")
                else:
                    found = True
                    text += (f"\n<b>{idx}. {server_name}</b>\n"
                             f"üåê <b>–°—Å—ã–ª–∫–∞:</b> <code>{url}</code>\n"
                             f"{expires_str}\n"
                             f"‚ùóÔ∏è <i>–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</i>\n"
                             f"{'‚Äî'*24}")
        except Exception:
            for idx, (key_id, url, created, expires_at) in enumerate(keys_by_server[server_id], 1):
                found = True
                expires_str = ""
                if expires_at:
                    try:
                        dt = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S")
                        days_left = (dt - datetime.now()).days
                        if days_left < 0:
                            expires_str = f"\n‚è∞ <b>–ö–ª—é—á –∏—Å—Ç—ë–∫</b> <code>{expires_at[:16]}</code>"
                        else:
                            expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code> (<b>{days_left}</b> –¥–Ω.)"
                    except Exception:
                        expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code>"
                text += (f"\n<b>{idx}. {server_name}</b>\n"
                         f"üåê <b>–°—Å—ã–ª–∫–∞:</b> <code>{url}</code>\n"
                         f"{expires_str}\n"
                         f"‚ö†Ô∏è <i>–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>\n"
                         f"{'‚Äî'*24}")
    if not found:
        text = "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
    await message.answer(text, reply_markup=main_kb, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
@dp.message(lambda message: message.text == "/support")
async def support_command(message: types.Message):
    support_text = (
        "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
        "üìß <b>Email:</b> support@example.com\n"
        "üì± <b>Telegram:</b> @support_username\n"
        "üåê <b>–°–∞–π—Ç:</b> https://example.com\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 24/7\n\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await message.answer(support_text, parse_mode="HTML", reply_markup=main_kb)

@dp.callback_query(lambda c: c.data == "about")
async def about_outline(callback: types.CallbackQuery):
    text = (
        "Outline VPN ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. "
        "–¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º —Å–≤–æ–±–æ–¥–Ω–æ."
    )
    await callback.message.edit_text(text, reply_markup=main_kb)

@dp.callback_query(lambda c: c.data == "choose_server")
async def choose_server(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN-–∫–ª—é—á–∞:",
        reply_markup=servers_kb
    )

@dp.callback_query(lambda c: c.data.startswith("server_"))
async def server_menu(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    server = OUTLINE_SERVERS[idx]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    server_info = {
        0: {
            "name": "–ì–µ—Ä–º–∞–Ω–∏—è",
            "flag": "üá©üá™",
            "traffic": "‚àû",
            "price": "349‚ÇΩ/–º–µ—Å—è—Ü",
            "type": "üåê Outline",
            "rating": "NA",
            "ping": "n/a ms",
            "cost": "349 —Ä—É–±/–º–µ—Å.",
            "trial": "1 –¥–µ–Ω—å"
        }
    }
    
    info = server_info.get(idx, {
        "name": server['name'],
        "flag": "üåê",
        "traffic": "‚àû",
        "price": "349‚ÇΩ/–º–µ—Å—è—Ü",
        "type": "üåê Outline",
        "rating": "NA",
        "ping": "n/a ms",
        "cost": "349 —Ä—É–±/–º–µ—Å.",
        "trial": "1 –¥–µ–Ω—å."
    })
    
    text = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {info['name']} {info['flag']}, {info['traffic']}, {info['price']}:\n\n"
        f"–¢–∏–ø: {info['type']}\n"
        f"–†–µ–π—Ç–∏–Ω–≥: {info['rating']}\n"
        f"Ping: {info['ping']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {info['cost']}\n"
        f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {info['trial']}\n\n"
        f"–ü–æ–ª—É—á–∞—è –∫–ª—é—á –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ https://outlinekeys.net/rules/OutlineKeysRobot"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data=f"genkey_{idx}")
    kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="choose_server")
    reply_markup = kb.as_markup()
    
    await callback.message.edit_text(text, reply_markup=reply_markup)

@dp.callback_query(lambda c: c.data.startswith("genkey_"))
async def generate_key(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    server = OUTLINE_SERVERS[idx]
    user_id = callback.from_user.id
    username = callback.from_user.username or f"user_{user_id}"
    res = create_access_key(server["api_url"], name=username)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="choose_server")
    reply_markup = kb.as_markup()
    
    if res and "id" in res and "accessUrl" in res:
        add_key(user_id, server["id"], res["id"], res["accessUrl"])
        await callback.message.edit_text(
            f"‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{res['accessUrl']}",
            reply_markup=reply_markup
        )
    else:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )

@dp.callback_query(lambda c: c.data == "my_keys")
async def my_keys(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    keys = get_keys(user_id)
    if not keys:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.",
            reply_markup=main_kb
        )
        return
    from collections import defaultdict
    keys_by_server = defaultdict(list)
    for server_id, key_id, url, created, *rest in keys:
        expires_at = rest[0] if rest else None
        keys_by_server[server_id].append((key_id, url, created, expires_at))
    text = "<b>üîë –¢–≤–æ–∏ VPN-–∫–ª—é—á–∏:</b>\n"
    found = False
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    server_names = {
        0: "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™"
    }
    
    for server in OUTLINE_SERVERS:
        server_id = server["id"]
        if server_id not in keys_by_server:
            continue
        server_name = server_names.get(server_id, server['name'])
        try:
            from outline_api import get_access_keys
            real_keys = get_access_keys(server["api_url"])
            real_keys_map = {k["id"]: k for k in real_keys} if real_keys else dict()
            for idx, (key_id, url, created, expires_at) in enumerate(keys_by_server[server_id], 1):
                # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                expires_str = ""
                if expires_at:
                    try:
                        dt = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S")
                        days_left = (dt - datetime.now()).days
                        if days_left < 0:
                            expires_str = f"\n‚è∞ <b>–ö–ª—é—á –∏—Å—Ç—ë–∫</b> <code>{expires_at[:16]}</code>"
                        else:
                            expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code> (<b>{days_left}</b> –¥–Ω.)"
                    except Exception:
                        expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code>"
                if key_id in real_keys_map:
                    found = True
                    used_bytes = real_keys_map[key_id].get("usedBytes", 0)
                    text += (f"\n<b>{idx}. {server_name}</b>\n"
                             f"üåê <b>–°—Å—ã–ª–∫–∞:</b> <code>{url}</code>\n"
                             f"{expires_str}\n"
                             f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b> <code>{used_bytes / (1024*1024):.1f} –ú–ë</code>\n"
                             f"{'‚Äî'*24}")
                else:
                    found = True
                    text += (f"\n<b>{idx}. {server_name}</b>\n"
                             f"üåê <b>–°—Å—ã–ª–∫–∞:</b> <code>{url}</code>\n"
                             f"{expires_str}\n"
                             f"‚ùóÔ∏è <i>–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</i>\n"
                             f"{'‚Äî'*24}")
        except Exception:
            for idx, (key_id, url, created, expires_at) in enumerate(keys_by_server[server_id], 1):
                found = True
                expires_str = ""
                if expires_at:
                    try:
                        dt = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S")
                        days_left = (dt - datetime.now()).days
                        if days_left < 0:
                            expires_str = f"\n‚è∞ <b>–ö–ª—é—á –∏—Å—Ç—ë–∫</b> <code>{expires_at[:16]}</code>"
                        else:
                            expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code> (<b>{days_left}</b> –¥–Ω.)"
                    except Exception:
                        expires_str = f"\n‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{expires_at[:16]}</code>"
                text += (f"\n<b>{idx}. {server_name}</b>\n"
                         f"üåê <b>–°—Å—ã–ª–∫–∞:</b> <code>{url}</code>\n"
                         f"{expires_str}\n"
                         f"‚ö†Ô∏è <i>–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>\n"
                         f"{'‚Äî'*24}")
    if not found:
        text = "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
    await callback.message.edit_text(text, reply_markup=main_kb, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "back_main")
async def back_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_kb
    )

async def main():
    init_db()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 