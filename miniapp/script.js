// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.getElementById('keys-btn').onclick = showKeys;
document.getElementById('stats-btn').onclick = showStats;
document.getElementById('support-btn').onclick = showSupport;

// API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE = "https://r14-vpn.ru/api";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateActiveNav(activeBtnId) {
  document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.getElementById(activeBtnId).classList.add('active');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ empty state
function renderTrafficOrEmpty(keys) {
  const main = document.getElementById('main-content');
  if (keys && keys.length > 0) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ –∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
    main.innerHTML = `
      <div class="traffic__inner">
        <div class="card traffic__card">
          <div class="traffic__content">
            <div class="traffic__header">
              <div class="traffic__icon">üìà</div>
              <div class="traffic__info">
                <span class="traffic__label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</span>
                <div class="traffic__amount">
                  <span class="used">15.2 –ì–ë</span>
                  <span class="separator">/</span>
                  <span class="limit">50 –ì–ë</span>
                </div>
                <div class="traffic__progress">
                  <div class="progress__bar">
                    <div class="progress__fill" style="width: 30%;"></div>
                  </div>
                  <span class="remaining">34.8 –ì–ë –æ—Å—Ç–∞–ª–æ—Å—å</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <section class="keys-section">
        <div class="card-header">
          <h2 class="keys-title">–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏</h2>
        </div>
        <div class="keys-list" id="keys-list">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </section>
     
    `;
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
    const keysList = document.getElementById('keys-list');

    if (keys && keys.length > 0) {
      keysList.innerHTML = keys.map(k => `
        <div class="key-item">
          <div class="key-info">
            <div class="key-server">
              <span> üá©üá™ ${k.name}</span>
            </div>
            <div class="key-status">
              <div class="status-indicator status-connected"></div>
              <span>–ê–∫—Ç–∏–≤–µ–Ω</span>
            </div>
          </div>
          <div class="key-expires">
            <span>–ò—Å—Ç–µ–∫–∞–µ—Ç: ${k.expiresAt}</span>
            <button class="key-btn-delete" onclick="deleteKey('${k.id}')"> —É–¥–∞–ª–∏—Ç—å </button>
          </div>
        </div>
      `).join('');
    } else {
      keysList.innerHTML = `
        <div class="no-keys">
          <div style="font-size: 48px;">üîë</div>
          <h4>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</h4>
          <p>–ö—É–ø–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã—à–µ</p>
        </div>
      `;
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    const btn = document.getElementById('get-key-btn');
    if (btn) btn.onclick = getKey;
  } else {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º empty state
    main.innerHTML = `
      <div class="traffic__inner">
        <div class="card traffic__card">
          <div class="empty__state">
            <div class="empty__state__image" style="font-size: 3rem;">üìâ</div>
            <h4 class="empty__state__title">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É</h4>
            <p class="empty__state__text">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.</p>
            <button class="empty__state__btn">–°–æ–∑–¥–∞—Ç—å VPN-–∫–ª—é—á</button>
          </div>
        </div>
      </div>
    `;
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    const emptyBtn = document.querySelector('.empty__state__btn');
    if (emptyBtn) emptyBtn.onclick = getKey;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª—é—á–µ–π
function showKeys() {
  updateActiveNav('keys-btn');
  
  // –ù–æ–≤—ã–π –≤—ã–∑–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫/empty state
  fetch(`${API_BASE}/keys`)
    .then(r => r.json())
    .then(data => {
      renderTrafficOrEmpty(data.keys);
      // –î–∞–ª–µ–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –Ω–∏–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π:', error);
      renderTrafficOrEmpty([]);
    });
  // –£–¥–∞–ª—è—é –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤ document.getElementById('get-key-btn').onclick = getKey;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
function getKey() {
  const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
  const username = tgUser?.username || `user_${tgUser?.id || 1}`;
  const user_id = tgUser?.id || 1;
  
  const btn = document.getElementById('get-key-btn');
  const originalText = btn.innerHTML;
  btn.innerHTML = '<span>‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...</span>';
  btn.disabled = true;
  
  fetch(`${API_BASE}/get_key`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ username, user_id })
  })
    .then(r => r.json())
    .then(data => {
      if (data.key) {
        showNotification('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
        showKeys();
      } else {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞', 'error');
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', error);
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞', 'error');
    })
    .finally(() => {
      btn.innerHTML = originalText;
      btn.disabled = false;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞
function deleteKey(keyName) {
  if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á "${keyName}"?`)) {
    return;
  }
  
  const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
  const user_id = tgUser?.id || 1;
  
  fetch(`${API_BASE}/delete_key`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key_name: keyName, user_id })
  })
    .then(r => r.json())
    .then(data => {
      if (data.success) {
        showNotification('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success');
        showKeys();
      } else {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞', 'error');
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞', 'error');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(text).then(() => {
      showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    }).catch(() => {
      showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    });
  } else {
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const textArea = document.createElement('textarea');
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function showStats() {
  updateActiveNav('stats-btn');
  
  document.getElementById('main-content').innerHTML = `
    <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
    <div id="stats" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  `;
  
  fetch(`${API_BASE}/stats`)
    .then(r => r.json())
    .then(data => {
      document.getElementById('stats').innerHTML = `
        <div class="stats-card">
          <div class="stat-item">
            <div class="stat-value">${data.traffic || 0}</div>
            <div class="stat-label">–ú–ë —Ç—Ä–∞—Ñ–∏–∫–∞</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${data.active_keys || 0}</div>
            <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</div>
          </div>
        </div>
        <div class="card">
          <div style="text-align: center; color: #fff; font-size: 14px;">
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN
          </div>
        </div>
      `;
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      document.getElementById('stats').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
function showSupport() {
  updateActiveNav('support-btn');
  
  document.getElementById('main-content').innerHTML = `
    <h2>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h2>
    <div class="card support-card">
      <div style="font-size: 48px; margin-bottom: 16px;">üí¨</div>
      <div style="font-size: 16px; color: #fff; margin-bottom: 12px; font-weight: 600;">–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</div>
      <div style="color: #fff; margin-bottom: 20px;">
        –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      </div>
      <a href="mailto:support@example.com" style="display: inline-block; padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 8px; font-weight: 500;">
        üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
      </a>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
    color: white;
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    animation: slideDown 0.3s ease;
  `;
  notification.textContent = message;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideDown {
      from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
      to { transform: translateX(-50%) translateY(0); opacity: 1; }
    }
  `;
  document.head.appendChild(style);
  
  document.body.appendChild(notification);
  
  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.style.animation = 'slideUp 0.3s ease';
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 300);
  }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  showKeys();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É
  document.addEventListener('click', function(e) {
    if (e.target.tagName === 'A' && e.target.href.includes('ss://')) {
      e.preventDefault();
      copyToClipboard(e.target.href);
    }
  });
}); 